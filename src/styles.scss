// variables

// scss-docs-start grid-breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
) !default;
// scss-docs-end grid-breakpoints

/* ==========
     Globals 
   ==========*/

$mainTransition: 0.3s ease-in-out;
$fasterTransition: 0.1s ease-in-out;
$contentMargin: 100px;

// responsive typography
:root {
  --biggest-font-size: 24px;
  --h2-font-size: 20px;
  --h3-font-size: 18px;
  --normal-font-size: 15px;
  --small-font-size: 12px;
  --smaller-font-size: 14px;

  @media (min-width: 991px) {
    --biggest-font-size: 36px;
    --h2-font-size: 28px;
    --h3-font-size: 20px;
    --normal-font-size: 18px;
    --small-font-size: 16px;
    --smaller-font-size: 14px;
  }

  --section-padding: 75px;
  --mb-8: 8px;
  --mb-12: 12px;
  --mb-16: 16px;
  --mb-24: 24px;
  --mb-32: 32px;
  --mb-64: 64px;
  --mb-100: 100px;
  // colors
  /*   --main-color: #ffb566;
 */
  --main-service-color: #9a0680;
  --title-color: #262626;
  --body-color: #fcfcfc;
  --text-color: #595959;
  --text-color-light: #8b8a8a;
  --button-color: #2b2b2b;
  --button-color-alt: #363636;
  --button-color-2: #bfbfbf;
  --border-color: #f1f1f1;
  --box-color: #fff;
  --cart-color: #1c1c1c;
  --btn-box-shadow: 3px 3px 2px rgb(241, 239, 239);
  --card-box-shadow: 0px 0px 5px -1px #616161;
  // social brand colors
  --facebook-clr: #1877f2;
  --google-clr: #ea4335;
  --twitter-clr: #1da1f2;
  --github-clr: #333;
  --insta-clr: #c13584;
  --behance-clr: #1769ff;
  --dribble-clr: #ea4c89;
  --linkedin-clr: #0077b5;
  --pin-clr: #e60023;
  --socials-clr: #88c1cf;
  --youtube-clr: #ff0000;
  --footer-clr: #b7e3b9;
}
@mixin overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

%flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// animation

@-webkit-keyframes moving-arrow {
  100% {
    transform: translatex(5px);
  }
}

@keyframes moving-arrow {
  100% {
    transform: translatex(5px);
  }
}

@-webkit-keyframes up-and-down {
  0%,
  100% {
    top: 0;
  }
  50% {
    top: -50px;
  }
}

@keyframes up-and-down {
  0%,
  100% {
    top: 0;
  }
  50% {
    top: -50px;
  }
}

@-webkit-keyframes bouncing {
  0%,
  10%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40%,
  60% {
    transform: translateY(-20px);
  }
}

@keyframes bouncing {
  0%,
  10%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40%,
  60% {
    transform: translateY(-20px);
  }
}

@-webkit-keyframes flashing {
  0%,
  40% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    width: 200%;
    height: 200%;
  }
}

@keyframes flashing {
  0%,
  40% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    width: 200%;
    height: 200%;
  }
}

// breakpoints

@use "variables" as *;

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if(
    $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - 0.02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max: breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}

// base

@import url("https://fonts.googleapis.com/css2?family=Cairo:wght@200;300;400;500;600;700;800;900&display=swap");

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}
html {
  scroll-behavior: smooth;
}

:focus {
  outline: none;
}

ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
  color: inherit;
  display: block;
  text-transform: capitalize;
}

.img-fluid {
  max-width: 100%;
  height: auto;
}
body {
  font-family: "Cairo", sans-serif;
  font-size: var(--normal-font-size);
  color: var(--text-color);
  transition: $mainTransition;
}

a.button,
.button {
  display: block;
  background-color: var(--button-color);
  color: #fff;
  padding: 17px 25px;
  cursor: pointer;
  text-transform: capitalize;
  font-weight: 500;
  text-align: center;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  /* box-shadow: 0 0 10px var(--border-color); */
  transition: $fasterTransition;
  &:hover {
    background-color: var(--button-color-alt);
  }
}

h2,
h3,
h4,
h5,
h6 {
  padding-bottom: 20px;
  text-transform: capitalize;
}

q {
  line-height: 1.4;
}

h1 {
  margin-bottom: 10px;
  font-size: 60px;
  @include media-breakpoint-between(md, lg) {
    font-size: 48px;
  }
  @include media-breakpoint-down(sm) {
    font-size: 32px;
  }
}

.grid {
  display: grid;
}

p {
  line-height: 1.6;
}

iframe {
  display: flex;
  width: 100%;
  height: 450px;
}

.price-plans,
.works,
.articles,
.stats,
.services,
.news,
.testimonial,
.gallery,
.skills {
  padding-top: var(--section-padding);
  padding-bottom: var(--section-padding);
}

.section-title {
  border: 2px solid #000;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin: 5px auto 75px;
  border-radius: 2px;
  color: #000;
  padding: 10px 20px;
  letter-spacing: 2px;
  text-transform: uppercase;
}

section {
  padding: 50px;
  @media screen and (max-width: 768px) {
    padding: 20px;
  }
}
